name: Deploy CAS to Render

on:
  workflow_dispatch: # manual trigger
  push:
    branches:
      - main
    paths:
      - "user/**"
      - "Admin-Spring/**"
      - "myapp/**"

jobs:
  deploy-user:
    name: "Deploy: user"
    environment: user
    if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified, ' '), 'user/') || contains(join(github.event.commits.*.added, ' '), 'user/') || contains(join(github.event.commits.*.removed, ' '), 'user/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: üöÄ Trigger USER Deploy
        id: trigger_user
        run: |
          echo "üîî Triggering deploy on Render for USER..."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/${{ secrets.RENDER_USER_ID }}/deploys)
          echo "üì° Raw trigger response: $RESPONSE"
          DEPLOY_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          if [ -z "$DEPLOY_ID" ]; then
            echo "‚ùå Failed to get deploy ID for USER"
            exit 1
          fi
          echo "‚úÖ Got deploy ID: $DEPLOY_ID"
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT

      - name: ‚è≥ Wait for USER Deploy
        run: |
          DEPLOY_ID="${{ steps.trigger_user.outputs.deploy_id }}"
          SERVICE_ID="${{ secrets.RENDER_USER_ID }}"
          echo "‚è≥ Waiting for USER deploy (Deploy ID: $DEPLOY_ID)..."
          for i in {1..30}; do
            echo "üîÑ [USER] Checking status (attempt $i/30)..."
            RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              https://api.render.com/v1/services/$SERVICE_ID/deploys/$DEPLOY_ID)
            echo "üîç [USER] Raw status response: $RESPONSE"
            STATUS=$(echo "$RESPONSE" | jq -r '.status // "unknown"')
            echo "üì° [USER] Current status: $STATUS"
            if [ "$STATUS" = "live" ]; then
              echo "‚úÖ [USER] Deploy succeeded!"
              exit 0
            elif [ "$STATUS" = "failed" ]; then
              echo "‚ùå [USER] Deploy failed!"
              exit 1
            fi
            sleep 10
          done
          echo "‚ö†Ô∏è [USER] Timed out waiting for deploy"
          exit 1

  deploy-admin-spring:
    name: "Deploy: Admin-Spring"
    environment: Admin-Spring
    if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified, ' '), 'Admin-Spring/') || contains(join(github.event.commits.*.added, ' '), 'Admin-Spring/') || contains(join(github.event.commits.*.removed, ' '), 'Admin-Spring/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: üöÄ Trigger ADMIN-SPRING Deploy
        id: trigger_admin
        run: |
          echo "üîî Triggering deploy on Render for ADMIN-SPRING..."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/${{ secrets.RENDER_ADMIN_SPRING_ID }}/deploys)
          echo "üì° Raw trigger response: $RESPONSE"
          DEPLOY_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          if [ -z "$DEPLOY_ID" ]; then
            echo "‚ùå Failed to get deploy ID for ADMIN-SPRING"
            exit 1
          fi
          echo "‚úÖ Got deploy ID: $DEPLOY_ID"
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT

      - name: ‚è≥ Wait for ADMIN-SPRING Deploy
        run: |
          DEPLOY_ID="${{ steps.trigger_admin.outputs.deploy_id }}"
          SERVICE_ID="${{ secrets.RENDER_ADMIN_SPRING_ID }}"
          echo "‚è≥ Waiting for ADMIN-SPRING deploy (Deploy ID: $DEPLOY_ID)..."
          for i in {1..30}; do
            echo "üîÑ [ADMIN-SPRING] Checking status (attempt $i/30)..."
            RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              https://api.render.com/v1/services/$SERVICE_ID/deploys/$DEPLOY_ID)
            echo "üîç [ADMIN-SPRING] Raw status response: $RESPONSE"
            STATUS=$(echo "$RESPONSE" | jq -r '.status // "unknown"')
            echo "üì° [ADMIN-SPRING] Current status: $STATUS"
            if [ "$STATUS" = "live" ]; then
              echo "‚úÖ [ADMIN-SPRING] Deploy succeeded!"
              exit 0
            elif [ "$STATUS" = "failed" ]; then
              echo "‚ùå [ADMIN-SPRING] Deploy failed!"
              exit 1
            fi
            sleep 10
          done
          echo "‚ö†Ô∏è [ADMIN-SPRING] Timed out waiting for deploy"
          exit 1

  deploy-myapp:
    name: "Deploy: myapp"
    environment: myapp
    needs: [deploy-user, deploy-admin-spring]
    if: github.event_name == 'workflow_dispatch' || contains(join(github.event.commits.*.modified, ' '), 'myapp/') || contains(join(github.event.commits.*.added, ' '), 'myapp/') || contains(join(github.event.commits.*.removed, ' '), 'myapp/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: üöÄ Trigger MYAPP Deploy
        id: trigger_myapp
        run: |
          echo "üîî Triggering deploy on Render for MYAPP..."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/${{ secrets.RENDER_MYAPP_ID }}/deploys)
          echo "üì° Raw trigger response: $RESPONSE"
          DEPLOY_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          if [ -z "$DEPLOY_ID" ]; then
            echo "‚ùå Failed to get deploy ID for MYAPP"
            exit 1
          fi
          echo "‚úÖ Got deploy ID: $DEPLOY_ID"
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT

      - name: ‚è≥ Wait for MYAPP Deploy
        run: |
          DEPLOY_ID="${{ steps.trigger_myapp.outputs.deploy_id }}"
          SERVICE_ID="${{ secrets.RENDER_MYAPP_ID }}"
          echo "‚è≥ Waiting for MYAPP deploy (Deploy ID: $DEPLOY_ID)..."
          for i in {1..30}; do
            echo "üîÑ [MYAPP] Checking status (attempt $i/30)..."
            RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              https://api.render.com/v1/services/$SERVICE_ID/deploys/$DEPLOY_ID)
            echo "üîç [MYAPP] Raw status response: $RESPONSE"
            STATUS=$(echo "$RESPONSE" | jq -r '.status // "unknown"')
            echo "üì° [MYAPP] Current status: $STATUS"
            if [ "$STATUS" = "live" ]; then
              echo "‚úÖ [MYAPP] Deploy succeeded!"
              exit 0
            elif [ "$STATUS" = "failed" ]; then
              echo "‚ùå [MYAPP] Deploy failed!"
              exit 1
            fi
            sleep 10
          done
          echo "‚ö†Ô∏è [MYAPP] Timed out waiting for deploy"
          exit 1
